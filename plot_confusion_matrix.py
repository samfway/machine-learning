#!/usr/bin/env python

__author__ = "Sam Way"
__copyright__ = "Copyright 2011, The QIIME Project"
__credits__ = ["Sam Way", "Dan Malmer", "Will Van Treuren", "Rob Knight"]
__license__ = "GPL"
__version__ = "1.7.0-dev"
__maintainer__ = "Sam Way"
__email__ = "samfway@gmail.com"
__status__ = "Development"

""" Functions to plot a confusion matrix (heat map) 
"""

from numpy import zeros, array, arange
import matplotlib.pyplot as plt

def parse_confusion_matrix_file(input_file, normalized=True):
    """ Parses the output of 'confusion_matrix.txt,' the file
        generated by supervised_learning.py's R script

        Assumes format:
        True\Predicted\t class_a\t class_b\t Class error
        class_a\t 197\t 40\t 0.168776371308017
        class_b\t 19\t 344\t 0.0523415977961433
    """ 
    input_fp = open(input_file, 'rU')
    first_line = input_fp.readline()
    line_pieces = first_line.split('\t')
    
    if line_pieces[0] != "True\Predicted":
        raise ValueError('Input file not in expected format\n' + \
            'First line should start with "True\Predicted."') 
        
    labels = line_pieces[1:-1]
    N = len(labels)
    confusion_matrix = zeros((N, N))
    for i in xrange(N):
        line_pieces = input_fp.readline().split('\t')
        values = array([ float(x) for x in line_pieces[1:-1] ])
        total = sum(values)
        if normalized: 
            if total > 0: 
                values = values / total
            else:
                raise ValueError('Row for "%s" contains all zeros' % (labels[i]))
        confusion_matrix[i] = values 
    return confusion_matrix, labels 

def make_confusion_matrix_plot(confusion_matrix, labels, output_filename):
    """ Use pcolor to make a labeled confusion matrix 
    """ 
    max_value = confusion_matrix.max()
    if max_value < 1.0:
        max_value = 1.0 # matrix is normalized 

    fig, ax = plt.subplots()
    heatmap = ax.pcolor(confusion_matrix, cmap=plt.cm.Spectral)
    ax.set_xticks(arange(confusion_matrix.shape[0])+0.5, minor=False)
    ax.set_yticks(arange(confusion_matrix.shape[1])+0.5, minor=False)
    ax.invert_yaxis()
    ax.xaxis.tick_top()
    ax.set_xticklabels(labels, minor=False) # add rotation=int to rotate labels
    ax.set_yticklabels(labels, minor=False)
    ax.set_aspect('equal', adjustable='box')  
    ax.set_xlabel('Predicted Labels', fontsize=18)
    ax.set_ylabel('True Labels', fontsize=18)
    ax.xaxis.set_label_position('top')
    heatmap.set_clim(vmin=0,vmax=max_value)
    fig.colorbar(heatmap)
    plt.savefig(output_filename) 
    
